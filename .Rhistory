#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import warnings #this is to silence a warning about using .replace later in the code
warnings.simplefilter(action='ignore', category=FutureWarning)
spotify_charts = pd.read_csv("initial_tables/spotify_top_charts_22.csv")
tiktok_charts = pd.read_csv("initial_tables/TikTok_songs_2022.csv")
billboard_charts = pd.read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv")
spotify_cleaned = (spotify_charts
.filter(items = ['track_name', 'artist_names', 'peak_rank', 'tempo'])
.rename(columns = {'track_name': 'song_title',
'artist_names': 'artist',
'peak_rank': 'rank_s'})
.sort_values('rank_s') # lower number means higher rank
)
spotify_cleaned
tiktok_cleaned = (tiktok_charts
.filter(items = ['track_name', 'artist_name', 'track_pop', 'tempo'])
.rename(columns = {'track_name': 'song_title',
'artist_name': 'artist',
'track_pop': 'rank_t'})
.sort_values('rank_t', ascending=False) # Higher number means higher ranking
)
tiktok_cleaned
billboard_cleaned = (billboard_charts
.rename(columns = {'Title': 'song_title',
'Artist(s)': 'artist',
'No.': 'rank_b'})
.sort_values('rank_b') # highest to lowest rank
)
billboard_cleaned['song_title'] = billboard_cleaned['song_title'].str.replace('"', '')
billboard_cleaned
print(spotify_cleaned[spotify_cleaned['song_title'].str.contains("Enemy")])
print(tiktok_cleaned[tiktok_cleaned['song_title'].str.contains("Enemy")])
print(billboard_cleaned[billboard_cleaned['song_title'].str.contains("Enemy")])
print(spotify_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(tiktok_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(billboard_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
song_syn = pd.read_csv('initial_tables/dict_song_titles.csv')
# Spotify
spotify_cleaned = spotify_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
spotify_cleaned['song_title'] = np.where( #if the alt_name column has a value then, replace song_title with canonical_name
spotify_cleaned['alt_name'].notna(),
spotify_cleaned['canonical_name'],
spotify_cleaned['song_title'])
spotify_cleaned = spotify_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# TikTok
tiktok_cleaned = tiktok_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
tiktok_cleaned['song_title'] = np.where(
tiktok_cleaned['alt_name'].notna(),
tiktok_cleaned['canonical_name'],
tiktok_cleaned['song_title'])
tiktok_cleaned = tiktok_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# Billboard
billboard_cleaned = billboard_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
billboard_cleaned['song_title'] = np.where(
billboard_cleaned['alt_name'].notna(),
billboard_cleaned['canonical_name'],
billboard_cleaned['song_title'])
billboard_cleaned = billboard_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# synonym table as dictionary
pd.read_csv('initial_tables/dict_song_titles.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
# synonym table as dataframe
pd.read_csv('initial_tables/dict_song_titles.csv', header=0)
# import the synonym table and convert to a dictionary using to.dict()
song_title_dict = pd.read_csv('initial_tables/dict_song_titles.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
# .replace looks for the song title in the keys of the dictionary and replaces the song_title with the value from the dictionary.
spotify_cleaned['song_title'].replace(song_title_dict, inplace = True)
tiktok_cleaned['song_title'].replace(song_title_dict, inplace = True)
billboard_cleaned['song_title'].replace(song_title_dict, inplace = True)
dict_artist = pd.read_csv('initial_tables/dict_artist.csv')
# Spotify
spotify_cleaned = spotify_cleaned.merge(dict_artist, left_on = 'artist', right_on = 'alt_name', how = 'left')
spotify_cleaned['artist'] = np.where( #if the alt_name column has a value then, replace artist with canonical_name
spotify_cleaned['alt_name'].notna(),
spotify_cleaned['canonical_name'],
spotify_cleaned['artist'])
spotify_cleaned = spotify_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# TikTok
tiktok_cleaned = tiktok_cleaned.merge(dict_artist, left_on = 'artist', right_on = 'alt_name', how = 'left')
tiktok_cleaned['artist'] = np.where(
tiktok_cleaned['alt_name'].notna(),
tiktok_cleaned['canonical_name'],
tiktok_cleaned['artist'])
tiktok_cleaned = tiktok_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# Billboard
billboard_cleaned = billboard_cleaned.merge(dict_artist, left_on = 'artist', right_on = 'alt_name', how = 'left')
billboard_cleaned['artist'] = np.where(
billboard_cleaned['alt_name'].notna(),
billboard_cleaned['canonical_name'],
billboard_cleaned['artist'])
billboard_cleaned = billboard_cleaned.drop(columns = ['canonical_name', 'alt_name'])
print(type(spotify_cleaned))
dict_artist = pd.read_csv('initial_tables/dict_artist.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
spotify_cleaned['artist'].replace(dict_artist, inplace = True)
tiktok_cleaned['artist'].replace(dict_artist, inplace = True)
billboard_cleaned['artist'].replace(dict_artist, inplace = True)
spotify_cleaned.to_csv("working_tables/spotify_cleaned_py.csv", index=False, header=True, sep=',',)
tiktok_cleaned.to_csv("working_tables/tiktok_cleaned_py.csv", index=False)
billboard_cleaned.to_csv("working_tables/billboard_cleaned_py.csv", index=False)
spotify_charts = pd.read_csv("initial_tables/spotify_top_charts_22.csv")
tiktok_charts = pd.read_csv("initial_tables/TikTok_songs_2022.csv")
billboard_charts = pd.read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv")
#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import warnings #this is to silence a warning about using .replace later in the code
warnings.simplefilter(action='ignore', category=FutureWarning)
spotify_charts = pd.read_csv("initial_tables/spotify_top_charts_22.csv")
tiktok_charts = pd.read_csv("initial_tables/TikTok_songs_2022.csv")
billboard_charts = pd.read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv")
#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import warnings #this is to silence a warning about using .replace later in the code
warnings.simplefilter(action='ignore', category=FutureWarning)
#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import warnings #this is to silence a warning about using .replace later in the code
warnings.simplefilter(action='ignore', category=FutureWarning)
spotify_charts = pd.read_csv("initial_tables/spotify_top_charts_22.csv")
spotify_charts
tiktok_charts = pd.read_csv("initial_tables/TikTok_songs_2022.csv")
billboard_charts = pd.read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv")
#| code-fold: true
#| code-summary: "Billboard"
spotify_charts = pd.read_csv("initial_tables/spotify_top_charts_22.csv")
GT(spotify_charts)
#| code-fold: true
#| code-summary: "Billboard"
billboard_charts = pd.read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv")
billboard_charts
spotify_cleaned = (spotify_charts
.filter(items = ['track_name', 'artist_names', 'peak_rank', 'tempo'])
.rename(columns = {'track_name': 'song_title',
'artist_names': 'artist',
'peak_rank': 'rank_s'})
.sort_values('rank_s') # lower number = higher rank
)
spotify_cleaned
#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import great_tables as gt
import warnings #this is to silence a warning about using .replace later in the code
warnings.simplefilter(action='ignore', category=FutureWarning)
spotify_cleaned = (spotify_charts
.filter(items = ['track_name', 'artist_names', 'peak_rank', 'tempo'])
.rename(columns = {'track_name': 'song_title',
'artist_names': 'artist',
'peak_rank': 'rank_s'})
.sort_values('rank_s') # lower number = higher rank
)
GT(spotify_cleaned)
#| code-fold: true
#| code-summary: "Python Setup"
# py_install("pandas")
import pandas as pd
import numpy as np
import great_tables as gt #this makes the python tables look nice
import warnings #this is to silence a warning about using .replace later in the code
from great_tables import GT
warnings.simplefilter(action='ignore', category=FutureWarning)
spotify_cleaned = (spotify_charts
.filter(items = ['track_name', 'artist_names', 'peak_rank', 'tempo'])
.rename(columns = {'track_name': 'song_title',
'artist_names': 'artist',
'peak_rank': 'rank_s'})
.sort_values('rank_s') # lower number = higher rank
)
GT(spotify_cleaned)
billboard_cleaned = (billboard_charts
.rename(columns = {'Title': 'song_title',
'Artist(s)': 'artist',
'No.': 'rank_b'})
.sort_values('rank_b') # highest to lowest rank
)
billboard_cleaned['song_title'] = billboard_cleaned['song_title'].str.replace('"', '')
GT(billboard_cleaned)
#| code-fold: true
#| code-summary: "Show the code"
print(spotify_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(tiktok_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(billboard_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
#| code-fold: true
#| code-summary: "Show the code"
spotify_cleaned.query('song_title.str.contains("Enemy")', engine='python')
print(tiktok_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(billboard_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
#| code-fold: true
#| code-summary: "Show the code"
GT(spotify_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(tiktok_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
print(billboard_cleaned.query('song_title.str.contains("Enemy")', engine='python'))
song_syn = pd.read_csv('initial_tables/dict_song_titles.csv')
# Spotify
spotify_cleaned = spotify_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
spotify_cleaned['song_title'] = np.where( #if the alt_name column has a value then, replace song_title with canonical_name
spotify_cleaned['alt_name'].notna(),
spotify_cleaned['canonical_name'],
spotify_cleaned['song_title'])
spotify_cleaned = spotify_cleaned.drop(columns = ['canonical_name', 'alt_name']) # remove unneccessary columns
# TikTok
tiktok_cleaned = tiktok_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
tiktok_cleaned['song_title'] = np.where(
tiktok_cleaned['alt_name'].notna(),
tiktok_cleaned['canonical_name'],
tiktok_cleaned['song_title'])
tiktok_cleaned = tiktok_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# Billboard
billboard_cleaned = billboard_cleaned.merge(song_syn, left_on = 'song_title', right_on = 'alt_name', how = 'left')
billboard_cleaned['song_title'] = np.where(
billboard_cleaned['alt_name'].notna(),
billboard_cleaned['canonical_name'],
billboard_cleaned['song_title'])
billboard_cleaned = billboard_cleaned.drop(columns = ['canonical_name', 'alt_name'])
# synonym table as dictionary
pd.read_csv('initial_tables/dict_song_titles.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
pd.read_csv('initial_tables/dict_song_titles.csv', header=0)
# synonym table as dictionary
pd.read_csv('initial_tables/dict_song_titles.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
# synonym table as dictionary
pd.read_csv('initial_tables/dict_song_titles.csv', header=0).set_index('alt_name')['canonical_name'].to_dict()
#| code-fold: true
#| code-summary: "R and DuckDB Setup"
#| warning: FALSE
library(readr)
library(tidyverse)
library(janitor)
library(gt)
library(reticulate)
library(DBI)
library(duckdb)
options(duckdb.enable_rstudio_connection_pane=TRUE)
drv <- duckdb()
con <- dbConnect(drv)
reticulate::repl_python()
#| code-fold: true
#| code-summary: "Spotify"
spotify_charts <- read_csv("initial_tables/spotify_top_charts_22.csv", show_col_types = FALSE)
spotify_charts
#| code-fold: true
#| code-summary: "TikTok"
tiktok_charts <- read_csv("initial_tables/TikTok_songs_2022.csv", show_col_types = FALSE)
tiktok_charts
#| code-fold: true
#| code-summary: "Billboard"
billboard_charts <- read_csv("initial_tables/Billboard_hot_100_year_end_2022.csv", show_col_types = FALSE)
billboard_charts
reticulate::repl_python()
spotify_cleaned <- spotify_charts |>
clean_names() |> #clean the column headers
select(track_name, artist_names, peak_rank, tempo) |> #select only certain columns
rename(song_title = track_name, artist = artist_names, rank_s = peak_rank) |>
arrange(rank_s) #order from most to least popular (lower number = more popular)
spotify_cleaned
reticulate::repl_python()
tiktok_cleaned <- tiktok_charts |>
clean_names() |> #clean the column headers
select(track_name, artist_name, track_pop, tempo) |> #filter for certain columns
rename(song_title = track_name, artist = artist_name, rank_t = track_pop) |>
arrange(desc(rank_t)) #arrange by popularity (higher number = more popular)
tiktok_cleaned
reticulate::repl_python()
billboard_cleaned <- billboard_charts |>
clean_names() |> #clean the column headers
select(title, artist_s, no) |> #reorder the columns
rename(song_title = title, rank_b = no, artist = artist_s) |>
mutate(song_title = str_replace_all(song_title, '"', '')) #take quotations off song titles
billboard_cleaned
reticulate::repl_python()
#| code-fold: true
#| code-summary: "Show the code"
spotify_cleaned |>
filter(str_detect(song_title, 'Enemy')) #filter for song titles containing "Enemy"
tiktok_cleaned |>
filter(str_detect(song_title, 'Enemy'))
billboard_cleaned |>
filter(str_detect(song_title, 'Enemy'))
reticulate::repl_python()
song_title_lookup <- read_csv("initial_tables/dict_song_titles.csv", show_col_types = FALSE)
song_title_lookup
spotify_cleaned <- spotify_cleaned |>
left_join(song_title_lookup, by = join_by(song_title == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |> #coalesce takes the first non-null value
select(song_title, artist, rank_s, tempo) #keep only relevant columns
tiktok_cleaned <- tiktok_cleaned |>
left_join(song_title_lookup, by = join_by(song_title == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |>
select(song_title, artist, rank_t, tempo)
billboard_cleaned <- billboard_cleaned |>
left_join(song_title_lookup, by = join_by(song_title == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |>
select(song_title, artist, rank_b)
reticulate::repl_python()
dict_artist <- read_csv("initial_tables/dict_artist.csv", show_col_types = FALSE)
dict_artist
spotify_cleaned <- spotify_cleaned |>
left_join(dict_artist, by = join_by(artist == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |>
select(song_title, artist, rank_s, tempo)
tiktok_cleaned <- tiktok_cleaned |>
left_join(dict_artist, by = join_by(artist == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |>
select(song_title, artist, rank_t, tempo)
billboard_cleaned <- billboard_cleaned |>
left_join(dict_artist, by = join_by(artist == alt_name)) |>
mutate(song_title = coalesce(canonical_name, song_title)) |>
select(song_title, artist, rank_b)
saveRDS(spotify_cleaned, "working_tables/spotify_cleaned.rds")
saveRDS(tiktok_cleaned, "working_tables/tiktok_cleaned.rds")
saveRDS(billboard_cleaned, "working_tables/billboard_cleaned.rds")
reticulate::repl_python()
#| code-fold: true
#| code-summary: "Show the code"
spotify_cleaned |>
filter(str_detect(song_title, 'Enemy')) #filter for song titles containing "Enemy"
tiktok_cleaned |>
filter(str_detect(song_title, 'Enemy'))
billboard_cleaned |>
filter(str_detect(song_title, 'Enemy'))
#| warning: false
#| echo: false
library(readr)
library(tidyverse)
library(janitor)
library(gt)
library(DBI)
library(duckdb)
options(duckdb.enable_rstudio_connection_pane=TRUE)
drv <- duckdb()
con <- dbConnect(drv)
library(reticulate)
# py_install("pandas")
# py_install("matplotlib")
reticulate::repl_python()
spotify_cleaned <- readRDS("working_tables/spotify_cleaned.rds")
tiktok_cleaned <- readRDS("working_tables/tiktok_cleaned.rds")
billboard_cleaned <- readRDS("working_tables/billboard_cleaned.rds")
combined_cleaned <- readRDS("working_tables/combined_cleaned.rds")
reticulate::repl_python()
# make a new dataframe with popular songs on TikTok that also appear on other charts
songs_on_all_charts <- combined_cleaned[complete.cases(combined_cleaned[ , c('rank_s', 'rank_t', 'rank_b')]), ]
# make the table look nice
gt(songs_on_all_charts) |>
tab_header(
title="Popular Songs on TikTok appearing on Other Charts"
)
reticulate::repl_python()
combined_cleaned |>
mutate( #create new columns that identify whether a song appears on the chart using TRUE/FALSE
on_tiktok = !is.na(rank_t), #identifies the non-NA songs appearing on the tiktok chart
on_spotify = !is.na(rank_s), #identifies the non-NA songs appearing on the spotify
on_billboard = !is.na(rank_b) #identifies the non-NA songs appearing on the billboard chart
) |>
summarize( #calculates the total number of TRUE values for each combination of charts
only_tiktok = sum(on_tiktok & !on_spotify & !on_billboard),
only_spotify = sum(!on_tiktok & on_spotify & !on_billboard),
only_billboard = sum(!on_tiktok & !on_spotify & on_billboard),
only_tiktok_and_spotify = sum(on_tiktok & on_spotify & !on_billboard),
only_tiktok_and_billboard = sum(on_tiktok & !on_spotify & on_billboard),
only_spotify_and_billboard = sum(!on_tiktok & on_spotify & on_billboard),
all_three = sum(on_tiktok & on_spotify & on_billboard)
)
reticulate::repl_python()
combined_discretized <- combined_cleaned |>
# Spotify
mutate(rank_s_percent = percent_rank(rank_s)) |> # get the percent rank for each observation
mutate(rank_s_label = case_when( # spotify rank_s shows the highest the song reached on the chart (lower number = more popular)
rank_s_percent < 0.10 ~ "Most popular",
rank_s_percent <= 0.50 ~ "Popular",
rank_s_percent > 0.50 ~ "On chart"
)) |>
#TikTok
mutate(rank_t_percent = percent_rank(rank_t)) |> # get the percent rank for each observation
mutate(rank_t_label = case_when( # tiktok rank_t shows the value that the algorithm eats (higher number = more popular)
rank_t_percent > 0.90 ~ "Most popular",
rank_t_percent >= 0.50 ~ "Popular",
rank_t_percent < 0.50 ~ "On chart"
)) |>
#Billboard
mutate(rank_b_percent = percent_rank(rank_b)) |> # get the percent rank for each observation
mutate(rank_b_label = case_when( # billboard rank_b shows the rank (lower number = high rank)
rank_b_percent < 0.10 ~ "Most popular",
rank_b_percent <= 0.50 ~ "Popular",
rank_b_percent > 0.50 ~ "On chart"
)) |>
select(song_title, artist, rank_s, rank_s_label, rank_t, rank_t_label, rank_b, rank_b_label, tempo)
