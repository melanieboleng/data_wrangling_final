{"title":"Joins","markdown":{"headingText":"Joins","headingAttr":{"id":"","classes":["unnumbered"],"keyvalue":[]},"containsRefs":false,"markdown":"\n```{r setup r and sql, echo=FALSE}\n#| warning: false\n#| echo: false\nlibrary(readr)\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(gt)\nlibrary(DBI)\nlibrary(duckdb)\noptions(duckdb.enable_rstudio_connection_pane=TRUE)\n\ndrv <- duckdb()\ncon <- dbConnect(drv)\nlibrary(reticulate)\n# py_install(\"pandas\")\n```\n\n```{python setup python, echo=FALSE, results=FALSE}\nimport pandas as pd\nimport numpy as np\nimport warnings\nwarnings.simplefilter(action='ignore', category=FutureWarning)\n```\n\n```{r, include=FALSE}\nspotify_cleaned <- readRDS(\"working_tables/spotify_cleaned.rds\")\ntiktok_cleaned <- readRDS(\"working_tables/tiktok_cleaned.rds\")\nbillboard_cleaned <- readRDS(\"working_tables/billboard_cleaned.rds\")\n```\n\n```{sql, include=FALSE}\n#| connection: con\nCREATE OR REPLACE TABLE spotify_cleaned AS\n  SELECT * FROM 'working_tables/spotify_cleaned_sql.csv';\nCREATE OR REPLACE TABLE tiktok_cleaned AS\n  SELECT * FROM 'working_tables/tiktok_cleaned_sql.csv';\nCREATE OR REPLACE TABLE billboard_cleaned AS\n  SELECT * FROM 'working_tables/billboard_cleaned_sql.csv';\n```\n\n```{python, include=FALSE}\nspotify_cleaned = pd.read_csv(\"working_tables/spotify_cleaned_py.csv\")\ntiktok_cleaned = pd.read_csv(\"working_tables/tiktok_cleaned_py.csv\")\nbillboard_cleaned = pd.read_csv(\"working_tables/billboard_cleaned_py.csv\")\n```\n\n\n\n--------------------------------------------------------------------------------\n\nNow that the tables are cleaned and the synonyms are taken care of, we can join the three tables into one big table. One consideration when joining the tables, was ensuring that songs with the same name (but are actually different songs as indicated by the artist) were not combined. We used the song_title and the artist columns as parameters to prevent that mishap from occuring. \n\n### Examples of Song Titles\n\nHere is a brief example of a song with the same name but different artists. \n\n::: panel-tabset\n\n#### R\n```{r cover artist example}\n#| code-fold: true\n#| code-summary: \"Show the code\"\nspotify_cleaned |>\n  filter(song_title == \"Cool for the Summer\")\n\ntiktok_cleaned |>\n  filter(song_title == \"Cool for the Summer\")\n```\n\n#### SQL\n```{sql cover artist example s}\n#| connection: con\n#| code-fold: true\n#| code-summary: \"Spotify\"\nSELECT *\nFROM spotify_cleaned\nWHERE song_title = 'Cool for the Summer'\n```\n\n```{sql cover artist example t}\n#| connection: con\n#| code-fold: true\n#| code-summary: \"TikTok\"\nSELECT *\nFROM tiktok_cleaned\nWHERE song_title = 'Cool for the Summer'\n```\n\n#### Python\n```{python}\n#| code-fold: true\n#| code-summary: \"Spotify\"\nspotify_cleaned.query(\"song_title == 'Cool for the Summer'\")\n```\n```{python}\n#| code-fold: true\n#| code-summary: \"TikTok\"\ntiktok_cleaned.query(\"song_title == 'Cool for the Summer'\")\n```\n:::\n\n\n### Joins/Merges\n\n::: panel-tabset\n\n#### R\n\nWe used a <code>full_join</code> and joined by <code>song_title</code> and <code>artist</code>. A <code>full_join</code> meant that all observations from both tables would be kept. We wanted to keep all observations even if it meant that some songs would have NA values for the rankings on the other charts. \n\n```{r s_and_t}\n# Join the TikTok and Spotify data by song title and call the new table s_and_t.\ns_and_t <- spotify_cleaned |>\n  full_join(tiktok_cleaned, by = join_by(song_title, artist))\ns_and_t\n```\n\n```{r combined}\n# Join the s_and_t table with the billboard table and call the new dataframe combined.\ncombined <- s_and_t |>\n  full_join(billboard_cleaned, by = join_by(song_title, artist))\ncombined\n```\n\nBecause both the Spotify and TikTok tables had a column called <code>tempo</code>, the resulting table had two columns for tempo: <code>tempo.x</code> and <code>tempo.y</code>. We used <code>coalesce</code> to combine the tempo columns into one since the tempo for an individual song would be the same no matter which chart it appears on. <code>coalesce</code> takes the tempo from the first non-missing value in the tempo.x and tempo.y columns and puts value in the new tempo column.\n\n```{r tempo combine}\ncombined_cleaned <- combined |>\n  mutate(tempo = coalesce(tempo.x, tempo.y), .keep = \"unused\")\ncombined_cleaned\n```\n\n```{r, include=FALSE}\nsaveRDS(combined_cleaned, \"working_tables/combined_cleaned.rds\")\n```\n\n\n#### SQL Piped\n\nWe tried two different methods for joining the tables in SQL. This first method pipes the code blocks together. We used a <code>FULL OUTER JOIN</code> to join by <code>song_title</code> and <code>artist</code>. The <code>FULL OUTER JOIN</code> combines all records from both tables. It joins the data where there are matches and fills in null for the missing data. <code>COALESCE</code> is used here to combine the tempo, song titles, and artists. \n\n```{sql}\n#| connection: con\n-- combine the spotify and tiktok tables\nCREATE OR REPLACE TABLE s_and_t AS \n    SELECT *, \n           COALESCE(tiktok_cleaned.tempo, spotify_cleaned.tempo) AS tempo_st, \n           COALESCE(tiktok_cleaned.song_title, spotify_cleaned.song_title) AS song_title_st, \n           COALESCE(tiktok_cleaned.artist, spotify_cleaned.artist) AS artist_st\n    FROM spotify_cleaned\n    FULL OUTER JOIN tiktok_cleaned ON tiktok_cleaned.song_title = spotify_cleaned.song_title AND tiktok_cleaned.artist = spotify_cleaned.artist\n;\n\n-- combine the spotify and tiktok table with the billboard table\nCREATE OR REPLACE TEMP TABLE s_t_b AS\n    SELECT *, \n           COALESCE(s_and_t.song_title_st, billboard_cleaned.song_title) AS song_title_real, \n           COALESCE(s_and_t.artist_st, billboard_cleaned.artist) AS artist_real\n    FROM s_and_t\n    FULL OUTER JOIN billboard_cleaned ON billboard_cleaned.song_title = s_and_t.song_title_st AND billboard_cleaned.artist = s_and_t.artist_st\n;\n-- select only the relevant columns\nCREATE OR REPLACE TABLE combined_cleaned_piped AS    \n  SELECT song_title_real AS song_title, \n         artist_real AS artist, \n         rank_s, \n         rank_t, \n         rank_b, \n         tempo_st AS tempo\n  FROM s_t_b\n```\n\n#### SQL w/ WITH\n\nThe second method uses <code>WITH</code>. The code creates several temporary tables that are then queried. The result of the query is stored as a new table. \n\n```{sql combine s and t and b - WITH}\n#| connection: con\n--combine the spotify and tiktok tables\nCREATE OR REPLACE TABLE combined_cleaned AS\n  WITH s_t AS (\n      SELECT *, \n             COALESCE(tiktok_cleaned.tempo, spotify_cleaned.tempo) AS tempo_st, \n             COALESCE(tiktok_cleaned.song_title, spotify_cleaned.song_title) AS song_title_st, \n             COALESCE(tiktok_cleaned.artist, spotify_cleaned.artist) AS artist_st\n      FROM spotify_cleaned\n      FULL OUTER JOIN tiktok_cleaned ON tiktok_cleaned.song_title = spotify_cleaned.song_title AND tiktok_cleaned.artist = spotify_cleaned.artist\n  ), s_t_b AS (\n--combine the spotify and tiktok table with the billboard table\n     SELECT *, \n             COALESCE(s_and_t.song_title_st, billboard_cleaned.song_title) AS song_title_real, \n             COALESCE(s_and_t.artist_st, billboard_cleaned.artist) AS artist_real\n      FROM s_and_t\n      FULL OUTER JOIN billboard_cleaned ON billboard_cleaned.song_title = s_and_t.song_title_st AND billboard_cleaned.artist = s_and_t.artist_st\n  )\n\nSELECT song_title_real AS song_title, \n         artist_real AS artist, \n         rank_s, \n         rank_t, \n         rank_b, \n         tempo_st AS tempo\nFROM s_t_b\n```\n\n```{sql, include=FALSE}\n#| connection: con\nCOPY combined_cleaned TO 'working_tables/combined_cleaned_sql.csv' (HEADER, DELIMITER ',');\n```\n\n\n#### Python\n\nThe Python version of this operation uses an outer <code>.merge</code> to combine the tables so that all observations are accounted for. The code is read \"inside-out,\" so first the Spotify and TikTok tables are merged, then the Billboard table is merged with the result and called combined. In the process of merging, two new tempo columns (tempo_x and tempo_y) were created. We used .combine_first (very similar to COALESCE is SQL), which combines two dataframe objects by replacing a null value with a non-null value.\n\n```{python}\n#combine the three datasets\ncombined = pd.merge(billboard_cleaned, \n                   (pd.merge(spotify_cleaned, \n                             tiktok_cleaned, \n                             how='outer', \n                             on=['song_title', 'artist'])), \n                    how='outer', \n                    on=['song_title', 'artist'])\n\n#combine the tempo columns\ncombined = (combined\n        .assign(tempo = lambda df_: df_.tempo_x.combine_first(combined.tempo_y))\n        .drop(columns = ['tempo_x', 'tempo_y'])\n        [['song_title', 'artist', 'rank_s', 'rank_t', 'rank_b', 'tempo']]\n)\ncombined\n```\n```{python, include=FALSE}\ncombined.to_csv(\"working_tables/combined_py.csv\", index=False)\n```\n\n:::\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"paged","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","self-contained":true,"output-file":"joins.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","theme":"cosmo","code_folding":"hide","code_summary":"Show the code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}